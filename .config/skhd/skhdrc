# focus window
# alt - up : yabai -m query --spaces --space \
#   | jq -re ".index" \
#   | xargs -I{} yabai -m query --windows --space {} \
#   | jq -sre 'add | map(select(."is-minimized"==false)) | sort_by(.display, .frame.y, .frame.x, .id) | . as $array | length as $array_length | index(map(select(."has-focus"==true))) as $has_index | if $has_index > 0 then nth($has_index - 1).id else nth($array_length - 1).id end' \
#   | xargs -I{} yabai -m window --focus {}

# alt - down : yabai -m query --spaces --space \
#   | jq -re ".index" \
#   | xargs -I{} yabai -m query --windows --space {} \
#   | jq -sre 'add | map(select(."is-minimized"==false)) | sort_by(.display, .frame.y, .frame.x, .id) | . as $array | length as $array_length | index(map(select(."has-focus"==true))) as $has_index | if $array_length - 1 > $has_index then nth($has_index + 1).id else nth(0).id end' \
#   | xargs -I{} yabai -m window --focus {}

alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window
# shift + alt - left : yabai -m window --swap west
# shift + alt - down : yabai -m window --swap south
# shift + alt - up : yabai -m window --swap north
# shift + alt - right : yabai -m window --swap east

# stack managed window
alt - left  : yabai -m window west --stack $(yabai -m query --windows --window | jq -r '.id')
alt - down  : yabai -m window south --stack $(yabai -m query --windows --window | jq -r '.id')
alt - up    : yabai -m window north --stack $(yabai -m query --windows --window | jq -r '.id')
alt - right : yabai -m window east --stack $(yabai -m query --windows --window | jq -r '.id')

# move managed window
shift + alt - h : yabai -m window --warp west
shift + alt - j : yabai -m window --warp south
shift + alt - k : yabai -m window --warp north
shift + alt - l : yabai -m window --warp east

# focus stack
shift + alt - 0x1E: yabai -m window --focus stack.prev
shift + alt - 0x21: yabai -m window --focus stack.next
# alt - f: yabai -m window --focus stack.first
# alt - g: yabai -m window --focus stack.last

# rotate tree
alt - r : yabai -m space --rotate 90

# toggle window fullscreen zoom
shift + alt - f : yabai -m window --toggle zoom-fullscreen

# alt - s : yabai -m window --toggle
# alt - s : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip

# toggle padding and gap
shift + alt - t : yabai -m space --toggle padding; yabai -m space --toggle gap
# alt - t : yabai -m space --layout bsp;\
#     yabai -m space --mirror y-axis;\
#     yabai -m window --focus largest;\
#     yabai -m window --insert east;\
#     yabai -m window --focus next;\
#     yabai -m window --focus next;\
#     yabai -m window --warp largest;\
#     yabai -m window --resize left:-200:0; \
#     yabai -m window --resize right:500:0; \

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle window split type
alt - e : yabai -m window --toggle split

# balance size of windows
shift + alt - 0 : yabai -m space --balance

# move window and focus desktop
shift + alt - 1 : yabai -m window --space 1 --focus; yabai -m space 1 --balance
shift + alt - 2 : yabai -m window --space 2 --focus; yabai -m space 2 --balance
shift + alt - 3 : yabai -m window --space 3 --focus; yabai -m space 3 --balance 
shift + alt - 4 : yabai -m window --space 4 --focus; yabai -m space 4 --balance 
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4



# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
shift + alt - n : yabai -m space --create && \
                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                   yabai -m window --space "${index}" && \
                   yabai -m space --focus "${index}"

# fast focus desktop
alt - tab : yabai -m space --focus recent

# send window to monitor and follow focus
shift + alt - n : yabai -m window --display next; yabai -m display --focus next
shift + alt - p : yabai -m window --display previous; yabai -m display --focus previous

# fullscreen toggle
ctrl + alt - space : yabai -m space --layout "$(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "stack" else "bsp" end')" && \
                        hs -c 'stackline.config:toggle("appearance.showIcons")'

# refresh stack icons
shift + alt - b :  hs -c 'stackline.config:toggle("appearance.showIcons")'

# cmd + shift - a : open -a "Amazon"
cmd + shift - b : open -na "Brave Browser" --args --new-window
cmd + shift + alt - b : open -na "Brave Browser"  --args --incognito
cmd + shift - c : open -a "Proton Calendar"
cmd + shift - e : open -a "Proton Mail"
cmd + shift - f : open -a "Finder"
cmd + shift - a : open -n -a "Grok"
cmd + shift - l : open -a "LocalSend"
cmd + shift - m : open -a "Spotify"
cmd + shift - o : open -a "Obsidian"
cmd + shift - p : open -a "Bitwarden"
cmd + shift - s : open -a "Signal"
cmd + shift - x : open -a "X"
cmd + shift - y : open -a "YouTube"

cmd + shift - t : kitty -o font_size=12 --directory=~ -e btop
cmd + shift - v : kitty --single-instance --directory=$HOME -e nvim -c "cd $HOME"
cmd + shift - d : kitty --single-instance --directory=~ -e lazydocker
cmd + shift - k : kitty --single-instance --directory=~
# cmd + shift - t : /Applications/Ghostty.app/Contents/MacOS/ghostty --font-size=12 --working-directory=$HOME -e btop
# cmd + shift - v : /Applications/Ghostty.app/Contents/MacOS/ghostty --working-directory=$HOME -e nvim -c "cd $HOME"
# cmd + shift - d : /Applications/Ghostty.app/Contents/MacOS/ghostty --working-directory=~ -e lazydocker
# cmd + shift - k : /Applications/Ghostty.app/Contents/MacOS/ghostty --working-directory=~ 
